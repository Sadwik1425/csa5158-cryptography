#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
int gcd(int a, int b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1)
            return x;
    }
    return -1;
}
void encrypt(char* plaintext, char* ciphertext, int a, int b) {
    int i;
    for (i = 0; plaintext[i] != '\0'; i++) {
        if (isalpha(plaintext[i])) {
            char base = isupper(plaintext[i]) ? 'A' : 'a';
            ciphertext[i] = (a * (plaintext[i] - base) + b) % 26 + base;
        } else {
            ciphertext[i] = plaintext[i];
        }
    }
    ciphertext[i] = '\0';
}
void decrypt(char* ciphertext, char* plaintext, int a, int b) {
    int i;
    int a_inv = modInverse(a, 26);
    if (a_inv == -1) {
        printf("Inverse of a does not exist, decryption is not possible.\n");
        exit(1);
    }
    for (i = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            char base = isupper(ciphertext[i]) ? 'A' : 'a';
            plaintext[i] = (a_inv * ((ciphertext[i] - base - b + 26)) % 26) + base;
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[i] = '\0';
}
int main() {
    char plaintext[1000], ciphertext[1000];
    int a, b;
    printf("Enter the value of a: ");
    scanf("%d", &a);
    printf("Enter the value of b: ");
    scanf("%d", &b);
    getchar();  
    if (gcd(a, 26) != 1) {
        printf("Error: a must be coprime with 26.\n");
        return 1;
    }
    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0';  
    encrypt(plaintext, ciphertext, a, b);
    printf("Encrypted Text: %s\n", ciphertext);
    decrypt(ciphertext, plaintext, a, b);
    printf("Decrypted Text: %s\n", plaintext);
    return 0;
}
OUTPUT:
Enter the value of a: 13
Enter the value of b: 4
Error: a must be coprime with 26.
